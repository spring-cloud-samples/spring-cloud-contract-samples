buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${findProperty('bootVersion') ?: bootVersion}"
		// remove::start[]
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${findProperty('verifierVersion') ?: verifierVersion}"
		// remove::end[]
	}
}

println "Boot Version [${findProperty('bootVersion') ?: bootVersion}], Cloud version [${findProperty('BOM_VERSION') ?: BOM_VERSION}], Contract version [${findProperty('verifierVersion') ?: verifierVersion}]"

group = 'com.example'
version = '0.0.1.BUILD-SNAPSHOT'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
// remove::start[]
apply plugin: 'spring-cloud-contract'
// remove::end[]
apply plugin: 'maven-publish'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.findProperty('BOM_VERSION') ?: BOM_VERSION}"
	}
}

sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")

	testCompile("org.springframework.cloud:spring-cloud-stream-test-support")
	// remove::start[]
	testCompile("org.springframework.cloud:spring-cloud-starter-contract-verifier")
	// remove::end[]
}

// remove::start[]
contracts {
	// We want to use the JAR with contracts with the following coordinates
	// group id `com.example`, artifact id `beer-contracts`, LATEST version and NO classifier
	contractDependency {
		stringNotation = 'com.example:beer-contracts:+:'
	}
	// The JAR with contracts should be taken from Maven local
	contractsMode = "LOCAL"
	// Base package for generated tests
	basePackageForTests = "com.example"
	baseClassMappings {
		baseClassMapping(".*messaging.*", "com.example.BeerMessagingBase")
		baseClassMapping(".*rest.*", "com.example.BeerRestBase")
	}
}
// remove::end[]

test {
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}
