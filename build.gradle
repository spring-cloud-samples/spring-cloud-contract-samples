buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

apply plugin: 'org.asciidoctor.convert'

repositories {
    maven { url "http://repo.spring.io/release" }
}

wrapper {
    gradleVersion '3.5'
}

dependencies {
    asciidoctor "io.spring.asciidoctor:spring-asciidoctor-extensions:0.1.0.RELEASE"
}

// Documentation tasks
asciidoctor {
    sourceDir = file('docs')
    sources {
        include 'index.adoc', 'workshops.adoc', 'tutorials/*'
    }
    outputDir = file('docs')
    separateOutputDirs = false
    resources { }
    attributes 'source-highlighter': 'prettify'

}

task removeHtml() {
  doLast {
      FileTree tree = fileTree(dir: 'docs', include: ['**/*.html'])
      tree.each {
        it.delete()
      }
  }
}

asciidoctor.mustRunAfter removeHtml

task generateDocumentation(dependsOn: ["removeHtml", "asciidoctor"]) {
    group = "Documentation"
    description = "Creates full documentation for the project"
}

// Workshop tasks
task removeContracts(type: Delete) {
    group = "Workshops"
    description = "Removes all contracts"
    List<String> producers =  ['producer', 'producer_with_scenario',
                               'producer_with_restdocs', 'producer_with_stubs_per_consumer']
    List<String> folders = producers.collect {
        "${it}/src/test/resources/contracts/"
    }
    delete folders
    delete 'beer_contracts/src/main/resources/contracts/'
}

task removeTextFromFiles() {
    group = "Workshops"
    description = "Removes written implementation"
    doLast {
        FileTree tree = fileTree(dir: '.', include: ['**/*.java',
                                                     '**/*.xml',
                                                     '**/*.gradle',
                                                     '**/*.properties'])
        tree.each { File file ->
            if (file.absolutePath == new File(project.rootDir, "build.gradle").absolutePath) {
                return
            }
            String text = file.text
            if (!text.contains("remove::start")) {
                return
            }
            StringBuilder newString = new StringBuilder()
            boolean remove = false
            text.eachLine { String line ->
                if(["import org.springframework.cloud.contract", "tag::", "end::"].any { line.contains(it) }) {
                    return
                }
                if (line.contains("remove::end[]")) {
                    remove = false
                } else if (line.contains("remove::end[return]")) {
                    // only related to java
                    newString.append(line.replace("//remove::end[return]", "return null;")).append("\n")
                    remove = false
                    return
                } else if (line.contains("//@org.junit.Ignore")) {
                    // only related to java
                    newString.append(line.replace("//", "")).append("\n")
                    return
                }
                if (!remove) {
                    if (line.contains("remove::start")) {
                        remove = true
                    } else if (!line.contains("remove::end")) {
                        newString.append(line).append("\n")
                    }
                }
            }
            file.text = newString.toString()
        }
    }
}

task prepareForWorkshops(dependsOn: ['removeContracts', 'removeTextFromFiles']) {
    group = "Workshops"
    description = "Executes all tasks to set initial state for workshops"
}
